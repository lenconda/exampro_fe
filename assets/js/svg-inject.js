!(function(o, l) { let r; let a; let s = 'createElement'; let g = 'getElementsByTagName'; let b = 'length'; let E = 'style'; let d = 'title'; let y = 'undefined'; let k = 'setAttribute'; let w = 'getAttribute'; let x = null; let A = '__svgInject'; let C = '--inject-'; let S = new RegExp(C + '\\d+', 'g'); let I = 'LOAD_FAIL'; let t = 'SVG_NOT_SUPPORTED'; let L = 'SVG_INVALID'; let v = ['src', 'alt', 'onload', 'onerror']; let j = l[s]('a'); let G = typeof SVGRect !== y; let f = { useCache: !0, copyAttributes: !0, makeIdsUnique: !0 }; let N = {
  clipPath: ['clip-path'], 'color-profile': x, cursor: x, filter: x, linearGradient: ['fill', 'stroke'], marker: ['marker',
    'marker-end', 'marker-mid', 'marker-start'], mask: x, pattern: ['fill', 'stroke'], radialGradient: ['fill', 'stroke'],
}; let u = 1; let c = 2; let O = 1; function T(e) { return (r = r || new XMLSerializer()).serializeToString(e) } function P(e, r) { let t; let n; let i; let o; let a = C + O++; let f = /url\("?#([a-zA-Z][\w:.-]*)"?\)/g; let u = e.querySelectorAll('[id]'); let c = r ? [] : x; let l = {}; let s = []; let d = !1; if (u[b]) { for (i = 0; i < u[b]; i++)(n = u[i].localName) in N && (l[n] = 1); for (n in l)(N[n] || [n]).forEach(function(e) { s.indexOf(e) < 0 && s.push(e) }); s[b] && s.push(E); let v; let p; let m; let h = e[g]('*'); let y = e; for (i = -1; y != x;
) { if (y.localName == E) { (m = (p = y.textContent) && p.replace(f, function(e, r) { return c && (c[r] = 1), 'url(#' + r + a + ')' })) !== p && (y.textContent = m) } else if (y.hasAttributes()) { for (o = 0; o < s[b]; o++)v = s[o], (m = (p = y[w](v)) && p.replace(f, function(e, r) { return c && (c[r] = 1), 'url(#' + r + a + ')' })) !== p && y[k](v, m); ['xlink:href', 'href'].forEach(function(e) { let r = y[w](e); /^\s*#/.test(r) && (r = r.trim(), y[k](e, r + a), c && (c[r.substring(1)] = 1)) }) }y = h[++i] } for (i = 0; i < u[b]; i++)t = u[i], c && !c[t.id] || (t.id += a, d = !0); } return d; } function V(e, r, t, n) { if (r) {
  r[k]('data-inject-url', t); let i = e.parentNode; if (i) { n.copyAttributes && (function c(e, r) { for (var t, n, i, o = e.attributes, a = 0; a < o[b]; a++) if (n = (t = o[a]).name, v.indexOf(n) == -1) if (i = t.value, n == d) { var f; let u = r.firstElementChild; u && u.localName.toLowerCase() == d ? f = u : (f = l[s + 'NS']('http://www.w3.org/2000/svg', d), r.insertBefore(f, u)), f.textContent = i } else r[k](n, i); })(e, r); let o = n.beforeInject; let a = o && o(e, r) || r; i.replaceChild(a, e), e[A] = u, m(e); let f = n.afterInject; f && f(e, a) } } else { D(e, n) } } function p() { for (var e = {}, r = arguments,
  t = 0; t < r[b]; t++) { let n = r[t]; for (let i in n)n.hasOwnProperty(i) && (e[i] = n[i]); } return e; } function _(e, r) { if (r) { let t; try { t = (function i(e) { return (a = a || new DOMParser()).parseFromString(e, 'text/xml') })(e) } catch (o) { return x } return t[g]('parsererror')[b] ? x : t.documentElement } let n = l.createElement('div'); return n.innerHTML = e, n.firstElementChild } function m(e) { e.removeAttribute('onload') } function n(e) { console.error('SVGInject: ' + e) } function i(e, r, t) { e[A] = c, t.onFail ? t.onFail(e, r) : n(r) } function D(e, r) { m(e), i(e, L, r);
} function F(e, r) { m(e), i(e, t, r) } function M(e, r) { i(e, I, r) } function q(e) { e.onload = x, e.onerror = x } function R(e) { n('no img element') } let e = (function z(e, r) { let t = p(f, r); let h = {}; function n(a, f) { f = p(t, f); let e = function(r) { let e = function() { let e = f.onAllFinish; e && e(), r && r() }; if (a && typeof a[b] !== y) { let t = 0; let n = a[b]; if (n == 0)e(); else for (let i = function() { ++t == n && e() }, o = 0; o < n; o++)u(a[o], f, i); } else { u(a, f, e) } }; return typeof Promise === y ? e() : new Promise(e) } function u(u, c, e) { if (u) { let r = u[A]; if (r) { Array.isArray(r) ? r.push(e) : e() } else { if (q(u), !G) return F(u, c), void e(); let t = c.beforeLoad; let n = t && t(u) || u[w]('src'); if (!n) return n === '' && M(u, c), void e(); let i = []; u[A] = i; let l = function() { e(), i.forEach(function(e) { e() }) }; let s = (function f(e) { return j.href = e, j.href })(n); let d = c.useCache; let v = c.makeIdsUnique; let p = function(r) { d && (h[s].forEach(function(e) { e(r) }), h[s] = r) }; if (d) { let o; let a = function(e) { if (e === I) { M(u, c) } else if (e === L) { D(u, c) } else { let r; let t = e[0]; let n = e[1]; let i = e[2]; v && (t === x ? (t = P(r = _(n, !1), !1), e[0] = t, e[2] = t && T(r)) : t && (n = (function o(e) {
  return e.replace(S, C + O++); })(i))), r = r || _(n, !1), V(u, r, s, c); }l(); }; if (typeof (o = h[s]) !== y) return void (o.isCallbackQueue ? o.push(a) : a(o)); (o = []).isCallbackQueue = !0, h[s] = o; }!(function m(e, r, t) { if (e) { let n = new XMLHttpRequest(); n.onreadystatechange = function() { if (n.readyState == 4) { let e = n.status; e == 200 ? r(n.responseXML, n.responseText.trim()) : 400 <= e ? t() : e == 0 && t() } }, n.open('GET', e, !0), n.send() } })(s, function(e, r) { let t = e instanceof Document ? e.documentElement : _(r, !0); let n = c.afterLoad; if (n) { let i = n(t, r) || t; if (i) {
  let o = typeof i === 'string'; r = o ? i : T(t), t = o ? _(i, !0) : i; } } if (t instanceof SVGElement) { let a = x; if (v && (a = P(t, !1)), d) { let f = a && T(t); p([a, r, f]) }V(u, t, s, c) } else { D(u, c), p(L) }l(); }, function() { M(u, c), p(I), l() }); } } else { R() } } return G && (function i(e) { let r = l[g]('head')[0]; if (r) { let t = l[s](E); t.type = 'text/css', t.appendChild(l.createTextNode(e)), r.appendChild(t) } })('img[onload^="' + e + '("]{visibility:hidden;}'), n.setOptions = function(e) { t = p(t, e) }, n.create = z, n.err = function(e, r) { e ? e[A] != c && (q(e), G ? (m(e), M(e, t)) : F(e, t), r && (m(e), e.src = r)) : R() }, o[e] = n; })('SVGInject'); typeof module === 'object' && typeof module.exports === 'object' && (module.exports = e); })(window, document);
